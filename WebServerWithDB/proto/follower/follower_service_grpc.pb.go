// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: follower_service.proto

package followers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FollowerService_GetFollower_FullMethodName    = "/FollowerService/GetFollower"
	FollowerService_UpsertFollower_FullMethodName = "/FollowerService/UpsertFollower"
	FollowerService_DeleteFollower_FullMethodName = "/FollowerService/DeleteFollower"
)

// FollowerServiceClient is the client API for FollowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowerServiceClient interface {
	GetFollower(ctx context.Context, in *GetFollowerRequest, opts ...grpc.CallOption) (*GetFollowerResponse, error)
	UpsertFollower(ctx context.Context, in *UpsertFollowerRequest, opts ...grpc.CallOption) (*UpsertFollowerResponse, error)
	DeleteFollower(ctx context.Context, in *DeleteFollowerRequest, opts ...grpc.CallOption) (*DeleteFollowerResponse, error)
}

type followerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowerServiceClient(cc grpc.ClientConnInterface) FollowerServiceClient {
	return &followerServiceClient{cc}
}

func (c *followerServiceClient) GetFollower(ctx context.Context, in *GetFollowerRequest, opts ...grpc.CallOption) (*GetFollowerResponse, error) {
	out := new(GetFollowerResponse)
	err := c.cc.Invoke(ctx, FollowerService_GetFollower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) UpsertFollower(ctx context.Context, in *UpsertFollowerRequest, opts ...grpc.CallOption) (*UpsertFollowerResponse, error) {
	out := new(UpsertFollowerResponse)
	err := c.cc.Invoke(ctx, FollowerService_UpsertFollower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) DeleteFollower(ctx context.Context, in *DeleteFollowerRequest, opts ...grpc.CallOption) (*DeleteFollowerResponse, error) {
	out := new(DeleteFollowerResponse)
	err := c.cc.Invoke(ctx, FollowerService_DeleteFollower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowerServiceServer is the server API for FollowerService service.
// All implementations must embed UnimplementedFollowerServiceServer
// for forward compatibility
type FollowerServiceServer interface {
	GetFollower(context.Context, *GetFollowerRequest) (*GetFollowerResponse, error)
	UpsertFollower(context.Context, *UpsertFollowerRequest) (*UpsertFollowerResponse, error)
	DeleteFollower(context.Context, *DeleteFollowerRequest) (*DeleteFollowerResponse, error)
	mustEmbedUnimplementedFollowerServiceServer()
}

// UnimplementedFollowerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowerServiceServer struct {
}

func (UnimplementedFollowerServiceServer) GetFollower(context.Context, *GetFollowerRequest) (*GetFollowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollower not implemented")
}
func (UnimplementedFollowerServiceServer) UpsertFollower(context.Context, *UpsertFollowerRequest) (*UpsertFollowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertFollower not implemented")
}
func (UnimplementedFollowerServiceServer) DeleteFollower(context.Context, *DeleteFollowerRequest) (*DeleteFollowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFollower not implemented")
}
func (UnimplementedFollowerServiceServer) mustEmbedUnimplementedFollowerServiceServer() {}

// UnsafeFollowerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowerServiceServer will
// result in compilation errors.
type UnsafeFollowerServiceServer interface {
	mustEmbedUnimplementedFollowerServiceServer()
}

func RegisterFollowerServiceServer(s grpc.ServiceRegistrar, srv FollowerServiceServer) {
	s.RegisterService(&FollowerService_ServiceDesc, srv)
}

func _FollowerService_GetFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).GetFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_GetFollower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).GetFollower(ctx, req.(*GetFollowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_UpsertFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertFollowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).UpsertFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_UpsertFollower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).UpsertFollower(ctx, req.(*UpsertFollowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_DeleteFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFollowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).DeleteFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_DeleteFollower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).DeleteFollower(ctx, req.(*DeleteFollowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowerService_ServiceDesc is the grpc.ServiceDesc for FollowerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FollowerService",
	HandlerType: (*FollowerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFollower",
			Handler:    _FollowerService_GetFollower_Handler,
		},
		{
			MethodName: "UpsertFollower",
			Handler:    _FollowerService_UpsertFollower_Handler,
		},
		{
			MethodName: "DeleteFollower",
			Handler:    _FollowerService_DeleteFollower_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "follower_service.proto",
}
